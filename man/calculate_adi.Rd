% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calculate_adi.R
\name{calculate_adi}
\alias{calculate_adi}
\title{Calculates ADIs from raw ACS data.}
\usage{
calculate_adi(acs_data, keep_indicators = FALSE,
  keep_columns = c("GEOID", "NAME"))
}
\arguments{
\item{acs_data}{A data-frame-like object of ACS data from the US Census API.
Must have the variables described in the "Details" section below.}

\item{keep_indicators}{Logical value indicating whether or not the resulting
tibble (or sf tibble) will contain the socioeconomic measures used to
calculate the ADI values.}

\item{keep_columns}{Character string vector of the names of columns in
acs_data to keep in the final result. Defaults to \code{c("GEOID",
"NAME")}. If acs_data is of class \code{sf}, the geometry column will be
kept regardless.}
}
\value{
A tibble (or an sf tibble if \code{acs_data} iss itself an sf tibble)
  containing firstly the columns of \code{acs_data} specified by
  \code{keep_columns}, followed by a column called \code{ADI}, calculated
  from the data present in \code{acs_data}, followed by the indicators used
  to calculate the ADIs if \code{keep_indicators = TRUE} (followed by the
  \code{geometry} column if \code{acs_data} iss an sf tibble).
  
  By default, this will be three columns: \code{GEOID}, \code{NAME}, and
  \code{ADI}. (Four columns, adding \code{geometry}, if \code{acs_data} is an
  sf tibble).
}
\description{
Returns a tibble or sf tibble of area deprivation indices (ADIs), calculating
them from a data frame of raw ACS data gathered from the US Census API
(preferrably via \code{tidycensus::get_acs}).
}
\details{
The argument acs_data must contain a tibble, sf tibble, data frame,
  or equivalent containing the following columns:
  
  \code{c("B01003_001E", "B19013_001E", "B19001_002E", "B19001_011E",
  "B19001_012E", "B19001_013E", "B19001_014E", "B19001_015E",
  "B19001_016E", "B19001_017E", "B17010_001E", "B17010_002E",
  "B25003_001E", "B25003_002E", "C17002_001E", "C17002_002E",
  "C17002_003E", "C17002_004E", "C17002_005E", "B25044_001E",
  "B25044_003E", "B25044_010E", "B25014_001E", "B25014_005E",
  "B25014_006E", "B25014_007E", "B25014_011E", "B25014_012E",
  "B25014_013E", "B25088_001E", "B25064_001E", "B25077_001E",
  "C24010_001E", "C24010_003E", "C24010_039E", "B23025_001E",
  "B23025_005E", "B15003_001E", "B15003_002E", "B15003_003E",
  "B15003_004E", "B15003_005E", "B15003_006E", "B15003_007E",
  "B15003_008E", "B15003_009E", "B15003_010E", "B15003_011E",
  "B15003_012E", "B15003_017E", "B15003_018E", "B15003_019E",
  "B15003_020E", "B15003_021E", "B15003_022E", "B15003_023E",
  "B15003_024E", "B15003_025E", "B23008_001E", "B23008_008E",
  "B23008_021E")}
  
  To obtain these columns using \code{tidycensus::get_acs}, make sure to set
  the argument \code{output = "wide"}, and make sure that the argument
  \code{variables} includes at least the elements of the character string
  vector in the example \strong{below} (notice the lack of "E" at the end of each
  column name).
  
  All other columns in \code{acs_data} that are not specified in
  \code{keep_columns} won't be present in the output. Exception: if
  \code{acs_data} is an \code{sf-class} object, the \code{geometry} column
  will remain in the output regardless of the contents of
  \code{keep_columns}.
  
  If there are any missing values, single imputation will be attempted using
  the \code{mice} package. Because of how \code{mice} is coded, the user must
  attach either the \code{sociome} package or the \code{mice} package for
  imputation to work (e.g., run \code{library("sociome")} or
  \code{library("mice")} before running \code{get_adi}). See
  \code{\link{mice.impute.pmm}} for details.
  
  Be advised that if too many missing values are present in \code{acs_data}
  (due to running \code{tidycensus::get_acs} on sparsely populated localities
  or for some other reason), ADIs might not be able to be obtained.
}
\examples{
\dontrun{              
acs_vars <- c("B01003_001", "B19013_001", "B19001_002", "B19001_011",
              "B19001_012", "B19001_013", "B19001_014", "B19001_015",
              "B19001_016", "B19001_017", "B17010_001", "B17010_002",
              "B25003_001", "B25003_002", "C17002_001", "C17002_002",
              "C17002_003", "C17002_004", "C17002_005", "B25044_001",
              "B25044_003", "B25044_010", "B25014_001", "B25014_005",
              "B25014_006", "B25014_007", "B25014_011", "B25014_012",
              "B25014_013", "B25088_001", "B25064_001", "B25077_001",
              "C24010_001", "C24010_003", "C24010_039", "B23025_001",
              "B23025_005", "B15003_001", "B15003_002", "B15003_003",
              "B15003_004", "B15003_005", "B15003_006", "B15003_007",
              "B15003_008", "B15003_009", "B15003_010", "B15003_011",
              "B15003_012", "B15003_017", "B15003_018", "B15003_019",
              "B15003_020", "B15003_021", "B15003_022", "B15003_023",
              "B15003_024", "B15003_025", "B23008_001", "B23008_008",
              "B23008_021")

connecticut_counties <- tidycensus::get_acs(geography = "county", variables = acs_vars,
                                            output = "wide", state = "CT")

calculate_adi(acs_data = connecticut_counties)
}

}
